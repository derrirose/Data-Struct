#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <queue>
using namespace std;
struct TreeNode
{
    int val;
    TreeNode* left;
    TreeNode* right;
};
TreeNode* BuildTree()
{
    TreeNode* T = nullptr;
    int x = 0;
    scanf("%d", &x);
    if (!x)
    {
        T = nullptr;
    }
    else
    {
        T = new TreeNode();
        T->val = x;
        T->left = BuildTree();
        T->right = BuildTree();
    }
    return T;
}
int high(TreeNode* root, int num1, int num2)
{
    if (root == nullptr)
        return 0;
    queue<TreeNode* > que;
    que.push(root);
    int level = 0;

    while (!que.empty())
    {
        ++level;
        int size = que.size();
        while (size != 0)
        {
            root = que.front(); que.pop();
            if (root->val == num1 || root->val == num2)
            {
                return level;
            }
            if (root->left != nullptr)
                que.push(root->left);
            if (root->right != nullptr)
                que.push(root->right);
            --size;
        }
    }
    return 0;
}

int shortestDistance(TreeNode* root, int num1, int num2)
{
    if (root == nullptr || num1 == num2)
        return 0;
    queue<TreeNode* > que;
    que.push(root);
    while (!que.empty())
    {
        root = que.front();
        que.pop();
        if (root->val == num1 || root->val == num2)
        {
            return high(root->left, num1, num2) + high(root->right, num1, num2);
        }
        if (high(root->left, num1, num2) > 0 && high(root->right, num1, num2) > 0)
        {
            return high(root->left, num1, num2) + high(root->right, num1, num2);
        }
        if (root->left != nullptr)
            que.push(root->left);
        if (root->right != nullptr)
            que.push(root->right);
    }
    return 0;
}
int main()
{
    TreeNode* root = new TreeNode();
    root = BuildTree();
    cout << shortestDistance(root, 1, 6) << endl;
    return 0;
}
