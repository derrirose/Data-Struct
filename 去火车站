#include<iostream>
#include<queue>
using namespace std;

#define INF 0x3f3f3f3f
#define N 20002

struct Edge;

struct Vertex
{
    int vername;
    Edge* adj;
};

struct Edge
{
    int veradj;
    int cost;
    Edge* link;
};

struct Node
{
    int v;
    int dist;
    Node(int a, int b)
    {
        v = a;
        dist = b;
    }
    bool operator <(const Node& b) const
    {
        return dist > b.dist;
    }
};

int path[20002];

Vertex head[20002];

void dis(int n, int s, int t, int dist[])
{
    int i = 0;
    int v = 0;
    int w = 0;
    int S[N] = { 0 };
    for (i = 1; i < n+1; i++)
    {
        path[i] = -1;
        dist[i] = INF;
    }
    dist[s] = 0;
    priority_queue<Node>PQ;
    PQ.push(Node(s, dist[s]));
    while (!PQ.empty())
    {
        Node q = PQ.top();
        PQ.pop();
        v = q.v;
        if (S[v] == 1) continue;
        S[v] = 1;
        for (Edge* p = head[v].adj; p; p = p->link)
        {
            w = p->veradj;
            if (S[w] == 0 && dist[v] + p->cost < dist[w])
            {
                dist[w] = dist[v] + p->cost;
                path[w] = v;
                PQ.push(Node(w, dist[w]));
            }
        }
    }
}

void Judge(int dist1[], int dist2[],int t)
{
    int k = 0;
    scanf("%d", &k);
    int l1 = 0;
    int l2 = 0;
    int l3 = 0;
    int l4 = 0;
    int change = INF;
    int sum = INF;
    sum = l1 = dist1[t];
    for (int i = 0; i < k; i++)
    {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        l2 = dist2[b];
        l3 = dist1[a];
        l4 = l2 + l3 + c;
        if (l4 < sum && l4 != l1)
        {
            sum = l4;
            change = a;
        }
        if (l4 == sum && l4 != l1)
        {
            if (a < change)
                change = a;
        }
    }
    printf("%d\n", sum);
    if (change == INF)
        printf("no metro\n");
    else
        printf("%d\n", change);
}

int main()
{
    int n = 0;
    int s = 0;
    int t = 0;
    while (scanf("%d%d%d", &n, &s, &t) != EOF)
    {
        for (int j = 1; j <= n; j++)
        {
            head[j].vername = j;
            head[j].adj = nullptr;
        }//初始化
        //建图
        int m;
        Edge* pre = nullptr;
        Edge* p = nullptr;
        Edge* q = nullptr;
        int v = 0;
        int u = 0;
        int weight = 0;
        scanf("%d", &m);
        for (int i = 0; i < m; i++)
        {
            scanf("%d%d%d", &v, &u, &weight);
            p = head[v].adj;
            q = head[u].adj;
            if (!p)
            {
                Edge* tmp = new Edge();
                tmp->veradj = u;
                tmp->cost = weight;
                tmp->link = nullptr;
                head[v].adj = tmp;
            }
            else
            {
                while (p)
                {
                    if (u > p->veradj)
                    {
                        pre = p;
                        p = p->link;
                    }
                    else
                        break;
                }
                if (p == head[v].adj)
                {
                    Edge* x = new Edge();
                    x->link = p;
                    x->cost = weight;
                    x->veradj = u;
                    head[v].adj = x;
                }
                else
                {
                    Edge* x = new Edge();
                    x->cost = weight;
                    x->veradj = u;
                    x->link = p;
                    pre->link = x;
                }
            }
            pre = nullptr;
            if (!q)
            {
                Edge* tmp = new Edge();
                tmp->veradj = v;
                tmp->cost = weight;
                tmp->link = nullptr;
                head[u].adj = tmp;
            }
            else
            {
                while (q)
                {
                    if (v > q->veradj)
                    {
                        pre = q;
                        q = q->link;
                    } else
                        break;
                }
                if (q == head[u].adj)
                {
                    Edge *x = new Edge();
                    x->link = q;
                    x->cost = weight;
                    x->veradj = v;
                    head[u].adj = x;
                }
                else
                {
                    Edge *x = new Edge();
                    x->cost = weight;
                    x->veradj = v;
                    x->link = q;
                    pre->link = x;
                }
            }
        }
        int dist1[20002] = { 0 };
        int dist2[20002] = { 0 };
        dis(n, s, t, dist1);
        dis(n, t, s, dist2);
        Judge(dist1, dist2, t);
    }
    return 0;
}
