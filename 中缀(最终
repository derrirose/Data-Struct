#include<stdio.h>
#include<string.h>
int spow(int a1, long long int a2)
{
	if (a2 == 0) return 1;
	int b = spow(a1, a2 / 2);
	int ans = b * b;
	if (a2 % 2 == 1) ans *= a1;
	return ans;
}
int Cal(int op1, int op2, char opc, int& flag)
{
	if (opc == '*')
		return op1 * op2;
	else if (opc == '/') {
		if (op2 == 0)
			flag = 1;
		else
			return op1 / op2;
	}
	else if (opc == '-')
		return op1 - op2;
	else if (opc == '+')
		return op1 + op2;
	else if (opc == '^')
		return spow(op1, op2);
}
int Judge(char next, char prior)//判断优先级
{
	//prior是栈里原有运算符，next是要入栈的；x是要入的优先级，y是栈里优先级
	int x = 0;
	int y = 0;
	if (next == '+' || next == '-')
		x = 1;
	else if (next == '*' || next == '/')
		x = 2;
	else if (next == '^')
		x = 3;
	else if (next == '(')
		x = 4;
	if (prior == '+' || prior == '-')
		y = 1;
	else if (prior == '*' || prior == '/')
		y = 2;
	else if (prior == '^')
		y = 3;
	else if (prior == '(')
		y = 4;
	if (x > y)return 1;
	return 0;
}
int main()
{
	char str[1000];//输入
	while (scanf("%s", str) != EOF)
	{
		int num[1000] = { 0 };//模拟运算数栈
		char ch[1000] = { ' ' };//模拟运算符栈
		int i = 0;
		int a = 0;//模拟num->top
		int b = 0;//模拟ch->top
		int flag = 0;//判断除数为0
		while (i < strlen(str))
		{
			if (str[i] >= '0' && str[i] <= '9')//数字
			{
				while (str[i] >= '0' && str[i] <= '9')
				{
					num[a] = num[a] * 10 + str[i++] - '0';//多位
				}
					a++;
					continue;			
			}
			else
			{
				if (str[i] == '(')//左括号直接进栈
					ch[b++] = str[i];
				else if (str[i] == ')')//右括号前运算符全处理掉
				{
					while (ch[b - 1] != '(')//往下处理，直到遇到左括号
					{
						num[a - 2] = Cal(num[a - 2], num[a-1], ch[b-1], flag);
						num[a - 1] = 0;
						b--;//改变运算符栈顶
						a--;//改变运算数栈顶
					}
					b--;
				}
				else//运算符
				{
					if (b == 0) //运算符栈为空，直接入
						ch[b++] = str[i];
					else if (Judge(str[i], ch[b - 1]))//如果当前优先级大则压入
						ch[b++] = str[i];
					else //栈顶运算符优先级小，进行计算
					{
						while (!Judge(str[i], ch[b - 1]))
						{
							if (ch[b - 1] == '(')//多重括号的情况
								break;
							num[a - 2] = Cal(num[a - 2], num[a-1], ch[b-1], flag);
							num[a - 1] = 0;
							b--;
							a--;
							if (b == 0)break;
						}
						ch[b++] = str[i];//计算完后再将此符号入运算符栈
					}
				}
			}
			i++;
		}
		while (a != 1 && b > 0)//运算数栈中剩余两位，符号剩余一位，把剩下的处理掉
		{
			num[a - 2] = Cal(num[a - 2], num[a-1], ch[b-1], flag);
			a--;
			b--;
		}
		if (flag == 1)
			printf("INVALID\n");
		else
			printf("%d\n", num[0]);
	}
}
