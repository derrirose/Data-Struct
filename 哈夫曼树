#include<iostream>
using namespace std;
struct HuffTree
{
    struct HuffTree* left;
    struct HuffTree* right;
    struct HuffTree* father;
    char data;
    int weight;
    int judge;
};
HuffTree* H[500];
HuffTree* h[500];
void sort(HuffTree* H[],int n)
{
     int i = 0;
     HuffTree* T = nullptr;
     int flag = 1;
     while(flag)
     {
         flag = 0;
         for(i = 0;i<n-1;i++)
         {
             if(H[i]->weight>H[i+1]->weight)//冒泡
             {
                 T = H[i];
                 H[i] = H[i+1];
                 H[i+1] = T;
                 flag = 1;
             }
         }
     }
}
void BuildNode(string ch,int freq[],int n)
{
      for(int i = 0;i<n;i++)
      {
          H[i] = new HuffTree();
          H[i]->data = ch[i+1];
          H[i]->weight = freq[i+1];
          H[i]->left = H[i]->right = H[i]->father =  nullptr;
          H[i]->judge = 1;
      }
      sort(H,n);
      for(int i = 0;i<n;i++)
          h[i] = H[i];
}
HuffTree* BuildTree(HuffTree* H[],int n)
{
    for(int i = 0;i<n-1;i++)
    {
        HuffTree* t = new HuffTree();
        t->weight = H[i]->weight+H[i+1]->weight;
        t->father = nullptr;
        t->judge = 0;
        t->data = ' ';
        H[i]->father = t;
        H[i+1]->father = t;
        if (H[i]->weight > H[i + 1]->weight)
        {
            t->left = H[i + 1];
            t->right = H[i];
        }
        else if (H[i]->weight < H[i + 1]->weight)
        {
            t->left = H[i]; 
            t->right = H[i + 1];
        }
        else
        {
            if (!H[i]->left&&!H[i]->right&&!H[i + 1]->left&&!H[i + 1]->right)
            {
                t->left = H[i];
                t->right = H[i + 1];
            }
            else if (!H[i]->left&&!H[i]->right&& (H[i + 1]->left || H[i + 1]->right))
            {
                t->left = H[i];
                t->right = H[i + 1];
            }
            else if ((H[i]->left|| H[i]->right) && !H[i + 1]->left&&!H[i + 1]->right)
            {
                t->left = H[i + 1];
                t->right = H[i];
            }
            else
            {
                t->left = H[i];
                t->right = H[i + 1];
            }
        }
        int j = i + 2;
        while (j < n && t->weight >= H[j]->weight)
        {
            H[j - 1] = H[j];
            j++;
        }
        H[j - 1] = t;
    }
    return H[n - 1];
}
int main()
{
    string inp;
    char ch[100];
    int exist[100] = {0};
    int j = 1;//j最后为字符种类+1
    int count[27] = {0};//频率
    int l = 0;
    int sum = 0;
    cin>>inp;
    int len = inp.size();
    for(int i = 0;i<len;i++)
    {
         if(!exist[inp[i]-'a'])
         {
             ch[j] = inp[i];
             count[j] =1;
             exist[inp[i]-'a'] = j;
             j++;
         }
         else
             count[exist[inp[i]-'a']]++;
    }
    BuildNode(ch,count,j-1);
    HuffTree* root = BuildTree(H,j-1);
    printf("%d ",len);
    for(int x = 0;x<j-1;x++)
    {
        HuffTree* son1 = h[x];
        HuffTree* ances1 = h[x]->father;
        while(ances1)
        {
            if(ances1->left==son1)
                l++;
            if(ances1->right==son1)
                l++;
            son1 = ances1;
            ances1 = ances1->father;
        }
        sum = l* count[exist[h[x]->data-'a']]+sum;
        l = 0;
    }
    printf("%d\n",sum/8+1);
    l = 0;
    //编码过程
    for(int x = 0;x<j-1;x++)
    {
        int trans[300] = {0};
        printf("%c:",h[x]->data);
        HuffTree* son = h[x];
        HuffTree* ances = h[x]->father;
        while(ances)
        {
            if(ances->left == son)
                trans[l++] = 0;
            if(ances->right == son)
                trans[l++] = 1;
            son = ances;
            ances = ances->father;//倒着找
        }
        for(int i = l-1;i>=0;i--)
            printf("%d",trans[i]);
        printf("\n");
        l = 0;
    }
    //译码部分
    HuffTree* tmp = root;
    for(string s;cin>>s;)//以string形式输入要编译的二进制串，方便统计其长度
    {
        int size = s.size();
        char outp[100];
        int flag = 0;
        int x = 0;
        int f = 0;
        for(int i = 0;i<size;i++)
        {
            if(s[i]=='0')
            {
                tmp = tmp->left;
                if(tmp->judge)
                {
                    outp[x++] = tmp->data;
                    tmp = root;
                    f = 1;
                }
            }
            else
            {
                tmp = tmp->right;
                if(tmp->judge)
                {
                    outp[x++] = tmp->data;
                    tmp = root;
                    f = 1;
                }
            }
            if (i == size - 1 && f == 0 && tmp->judge == 0)
                flag = 1;
            f = 0;
        }
        if(flag == 0)
        {
            for(int k = 0;k<x;k++)
                printf("%c",outp[k]);
        }
        else printf("INVALID");
        printf("\n");
    }
}
